The application structure is as the following:

frontend/
    vite.config.ts
    public/
    src/
        App.tsx
        index.css
        index.tsx
        types.ts
        vite-env.d.ts
        assets/
        components/
            audio/
                player.ts
                recorder.ts
            ui/
                button.tsx
                card.tsx
                ListingCard.tsx
                MapView.tsx
                status-message.css
                status-message.tsx
        hooks/
            useAudioPlayer.tsx
            useAudioRecorder.tsx
            useRealtime.tsx
        i18n/
            config.ts
        lib/
            utils.ts
        locales/
            en/
            es/
            fr/
            ja/

Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\vite.config.ts
Content:
import path from "path";
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";

// https://vitejs.dev/config/
export default defineConfig({
    plugins: [react()],
    build: {
        outDir: "../backend/static",
        emptyOutDir: true,
        sourcemap: true
    },
    resolve: {
        preserveSymlinks: true,
        alias: {
            "@": path.resolve(__dirname, "./src")
        }
    },
    server: {
        proxy: {
            "/realtime": {
                target: "ws://localhost:8765",
                ws: true,
                rewriteWsOrigin: true
            }
        }
    }
});


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\App.tsx
Content:
import { useState } from "react";
import { Mic, MicOff } from "lucide-react";
import { useTranslation } from "react-i18next";

import StatusMessage from "@/components/ui/status-message";
import useRealTime from "@/hooks/useRealtime";
import useAudioRecorder from "@/hooks/useAudioRecorder";
import useAudioPlayer from "@/hooks/useAudioPlayer";
import { Listing } from "./types";
import isEqual from "lodash.isequal";
import logo from "./assets/logo.svg";
import ListingCard from "./components/ui/ListingCard";
import MapView from "./components/ui/MapView";

function App() {
    const [isRecording, setIsRecording] = useState(false);
    const [listings, setListings] = useState<Listing[]>([]);

    const { startSession, addUserAudio, inputAudioBufferClear } = useRealTime({
        onWebSocketOpen: () => console.log("WebSocket connection opened"),
        onWebSocketClose: () => console.log("WebSocket connection closed"),
        onWebSocketError: event => console.error("WebSocket error:", event),
        onReceivedError: message => console.error("error", message),
        onReceivedResponseAudioDelta: message => {
            isRecording && playAudio(message.delta);
        },
        onReceivedInputAudioBufferSpeechStarted: () => {
            stopAudioPlayer();
        },
        onReceivedExtensionMiddleTierToolResponse: message => {
            const result = JSON.parse(message.tool_result);
            const newListings = result.listings || [];
            if (!isEqual(listings, newListings)) {
                setListings(newListings);
            }
        }
    });

    const { reset: resetAudioPlayer, play: playAudio, stop: stopAudioPlayer } = useAudioPlayer();
    const { start: startAudioRecording, stop: stopAudioRecording } = useAudioRecorder({ onAudioRecorded: addUserAudio });

    const onToggleListening = async () => {
        if (!isRecording) {
            startSession();
            await startAudioRecording();
            resetAudioPlayer();
            setIsRecording(true);
        } else {
            await stopAudioRecording();
            stopAudioPlayer();
            inputAudioBufferClear();
            setIsRecording(false);
        }
    };

    const { t } = useTranslation();
    const mapCenter: [number, number] = listings.length > 0 ? [listings[0].lng, listings[0].lat] : [16.3738, 48.2082];

    // Mark the first listing as the "best"
    const enhancedListings = listings.map((l, idx) => ({
        ...l,
        isBest: idx === 0
    }));

    return (
        <div className="flex min-h-screen flex-col bg-gray-100 text-gray-900">
            {/* Header Section */}
            <header className="w-full border-b bg-white py-4">
                <div className="container mx-auto flex flex-col items-center gap-4 px-4 sm:flex-row sm:items-center sm:justify-start">
                    <img src={logo} alt="Azure logo" className="h-16 w-16" />
                    <h1 className="bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-center text-3xl font-bold text-transparent sm:text-left md:text-5xl">
                        {t("app.title")}
                    </h1>
                </div>
            </header>

            <main className="flex flex-grow flex-col">
                <div className="container mx-auto flex flex-col items-center justify-center px-4 py-8">
                    {/* Recording Section */}
                    <div className="mb-8 flex flex-col items-center justify-center">
                        <div
                            className={`record-button ${isRecording ? "recording" : ""}`}
                            onClick={onToggleListening}
                            aria-label={isRecording ? t("app.stopRecording") : t("app.startRecording")}
                        >
                            {isRecording ? <MicOff className="icon" /> : <Mic className="icon" />}
                        </div>
                        <StatusMessage isRecording={isRecording} />
                    </div>

                    {/* Map Section */}
                    {enhancedListings.length > 0 && (
                        <div className="mb-8 w-full">
                            <MapView listings={enhancedListings} center={mapCenter} />
                        </div>
                    )}

                    {/* Listings Section */}
                    {enhancedListings.length > 0 && (
                        <div className="flex flex-wrap justify-center gap-4">
                            {enhancedListings.map((l, idx) => (
                                <ListingCard key={idx} listing={l} isBest={l.isBest} />
                            ))}
                        </div>
                    )}
                </div>
            </main>

            <footer className="w-full border-t bg-white py-4">
                <div className="container mx-auto px-4 text-center">
                    <p>{t("app.footer")}</p>
                </div>
            </footer>
        </div>
    );
}

export default App;


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\index.css
Content:
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    font-family: "Segoe UI", Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;

    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@layer base {
    :root {
        --background: 0 0% 100%;
        --foreground: 0 0% 3.9%;
        --card: 0 0% 100%;
        --card-foreground: 0 0% 3.9%;
        --popover: 0 0% 100%;
        --popover-foreground: 0 0% 3.9%;
        --primary: 0 0% 9%;
        --primary-foreground: 0 0% 98%;
        --secondary: 0 0% 96.1%;
        --secondary-foreground: 0 0% 9%;
        --muted: 0 0% 96.1%;
        --muted-foreground: 0 0% 45.1%;
        --accent: 0 0% 96.1%;
        --accent-foreground: 0 0% 9%;
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 89.8%;
        --input: 0 0% 89.8%;
        --ring: 0 0% 3.9%;
        --chart-1: 12 76% 61%;
        --chart-2: 173 58% 39%;
        --chart-3: 197 37% 24%;
        --chart-4: 43 74% 66%;
        --chart-5: 27 87% 67%;
        --radius: 0.5rem;
    }
    .dark {
        --background: 0 0% 3.9%;
        --foreground: 0 0% 98%;
        --card: 0 0% 3.9%;
        --card-foreground: 0 0% 98%;
        --popover: 0 0% 3.9%;
        --popover-foreground: 0 0% 98%;
        --primary: 0 0% 98%;
        --primary-foreground: 0 0% 9%;
        --secondary: 0 0% 14.9%;
        --secondary-foreground: 0 0% 98%;
        --muted: 0 0% 14.9%;
        --muted-foreground: 0 0% 63.9%;
        --accent: 0 0% 14.9%;
        --accent-foreground: 0 0% 98%;
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 14.9%;
        --input: 0 0% 14.9%;
        --ring: 0 0% 83.1%;
        --chart-1: 220 70% 50%;
        --chart-2: 160 60% 45%;
        --chart-3: 30 80% 55%;
        --chart-4: 280 65% 60%;
        --chart-5: 340 75% 55%;
    }
}

.map-container > div {
    width: 100%;
    height: 600px;
}

/* Styles for the circular recording toggle button */
.record-button {
    position: relative;
    width: 60px;
    height: 60px;
    border-radius: 9999px;
    background: linear-gradient(90deg, #ff00c8, #8400ff, #ff00c8);
    background-size: 300% 300%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-position 2s linear;
    overflow: hidden;
}

.record-button:hover {
    background-position: 100% 50%;
}

.record-button .icon {
    color: #ffffff;
    width: 24px;
    height: 24px;
}

.record-button.recording {
    animation: gradient-border 3s linear infinite;
}

/* Radiating circles when recording */
.record-button.recording::before,
.record-button.recording::after {
    content: "";
    position: absolute;
    width: 120px;
    height: 120px;
    border-radius: 9999px;
    background: radial-gradient(rgba(255, 0, 200, 0.3), transparent);
    opacity: 0;
    animation: radiate 2s infinite;
}

.record-button.recording::before {
    animation-delay: 0s;
}

.record-button.recording::after {
    animation-delay: 1s;
}

@keyframes radiate {
    0% {
        transform: scale(0.7);
        opacity: 1;
    }
    100% {
        transform: scale(2);
        opacity: 0;
    }
}

/* Existing gradient-border keyframes from before */
@keyframes gradient-border {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

@layer base {
    * {
        @apply border-border;
    }
    body {
        @apply bg-background text-foreground;
    }
}

/* Gradient border animation for the best listing card */
.best-listing-card {
    position: relative;
    border: none;
    animation: gradient-border 3s linear infinite;
    border-radius: 0.5rem;
    padding: 6px;
    background: linear-gradient(90deg, #ff00c8, #8400ff, #ff00c8);
    background-size: 300% 300%;
}

.best-listing-card,
.border-gray-200 {
    max-width: 450px;
}

@keyframes gradient-border {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

/* Inner content of the card should not be affected by the gradient border background */
.best-listing-card > * {
    background: #fff;
    border-radius: 0.5rem;
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\index.tsx
Content:
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";

import { I18nextProvider } from "react-i18next";
import i18next from "./i18n/config";

import App from "./App.tsx";
import "./index.css";

createRoot(document.getElementById("root")!).render(
    <StrictMode>
        <I18nextProvider i18n={i18next}>
            <App />
        </I18nextProvider>
    </StrictMode>
);


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\types.ts
Content:
export type SessionUpdateCommand = {
    type: "session.update";
    session: {
        turn_detection?: {
            type: "server_vad" | "none";
        };
        input_audio_transcription?: {
            model: "whisper-1";
        };
    };
};

export type InputAudioBufferAppendCommand = {
    type: "input_audio_buffer.append";
    audio: string;
};

export type InputAudioBufferClearCommand = {
    type: "input_audio_buffer.clear";
};

export type Message = {
    type: string;
};

export type ResponseAudioDelta = {
    type: "response.audio.delta";
    delta: string;
};

export type ResponseAudioTranscriptDelta = {
    type: "response.audio_transcript.delta";
    delta: string;
};

export type ResponseInputAudioTranscriptionCompleted = {
    type: "conversation.item.input_audio_transcription.completed";
    event_id: string;
    item_id: string;
    content_index: number;
    transcript: string;
};

export type ResponseDone = {
    type: "response.done";
    event_id: string;
    response: {
        id: string;
        output: { id: string; content?: { transcript: string; type: string }[] }[];
    };
};

export type ExtensionMiddleTierToolResponse = {
    type: "extension.middle_tier_tool.response";
    previous_item_id: string;
    tool_name: string;
    tool_result: string; // JSON string that needs to be parsed into ToolResult
};

export type Listing = {
    id: string;
    title: string;
    description: string;
    location: string;
    contact: string;
    price: number;
    rooms: number;
    size: number;
    floor: number;
    availability: string;
    lat: number;
    lng: number;
};


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\vite-env.d.ts
Content:
/// <reference types="vite/client" />


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\audio\player.ts
Content:
export class Player {
    private playbackNode: AudioWorkletNode | null = null;

    async init(sampleRate: number) {
        const audioContext = new AudioContext({ sampleRate });
        await audioContext.audioWorklet.addModule("audio-playback-worklet.js");

        this.playbackNode = new AudioWorkletNode(audioContext, "audio-playback-worklet");
        this.playbackNode.connect(audioContext.destination);
    }

    play(buffer: Int16Array) {
        if (this.playbackNode) {
            this.playbackNode.port.postMessage(buffer);
        }
    }

    stop() {
        if (this.playbackNode) {
            this.playbackNode.port.postMessage(null);
        }
    }
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\audio\recorder.ts
Content:
export class Recorder {
    onDataAvailable: (buffer: Iterable<number>) => void;
    private audioContext: AudioContext | null = null;
    private mediaStream: MediaStream | null = null;
    private mediaStreamSource: MediaStreamAudioSourceNode | null = null;
    private workletNode: AudioWorkletNode | null = null;

    public constructor(onDataAvailable: (buffer: Iterable<number>) => void) {
        this.onDataAvailable = onDataAvailable;
    }

    async start(stream: MediaStream) {
        try {
            if (this.audioContext) {
                await this.audioContext.close();
            }

            this.audioContext = new AudioContext({ sampleRate: 24000 });

            await this.audioContext.audioWorklet.addModule("./audio-processor-worklet.js");

            this.mediaStream = stream;
            this.mediaStreamSource = this.audioContext.createMediaStreamSource(this.mediaStream);

            this.workletNode = new AudioWorkletNode(this.audioContext, "audio-processor-worklet");
            this.workletNode.port.onmessage = event => {
                this.onDataAvailable(event.data.buffer);
            };

            this.mediaStreamSource.connect(this.workletNode);
            this.workletNode.connect(this.audioContext.destination);
        } catch (error) {
            this.stop();
        }
    }

    async stop() {
        if (this.mediaStream) {
            this.mediaStream.getTracks().forEach(track => track.stop());
            this.mediaStream = null;
        }

        if (this.audioContext) {
            await this.audioContext.close();
            this.audioContext = null;
        }

        this.mediaStreamSource = null;
        this.workletNode = null;
    }
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\button.tsx
Content:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
        variants: {
            variant: {
                default: "bg-primary text-primary-foreground hover:bg-primary/90",
                destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline"
            },
            size: {
                default: "h-10 px-4 py-2",
                sm: "h-9 rounded-md px-3",
                lg: "h-11 rounded-md px-8",
                icon: "h-10 w-10"
            }
        },
        defaultVariants: {
            variant: "default",
            size: "default"
        }
    }
);

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
    asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
});
Button.displayName = "Button";

export { Button, buttonVariants };


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\card.tsx
Content:
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
    <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
    <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
));
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\ListingCard.tsx
Content:
import { Listing } from "@/types";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "./card";

interface ListingCardProps {
    listing: Listing & { isBest?: boolean };
    isBest?: boolean;
}

export default function ListingCard({ listing, isBest = false }: ListingCardProps) {
    return (
        <Card className={`m-4 w-full max-w-md overflow-hidden rounded-lg border ${isBest ? "best-listing-card" : "border-gray-200"} shadow-md`}>
            <CardHeader className="bg-gray-100 p-4">
                <CardTitle className="text-lg font-bold">{listing.title}</CardTitle>
                <CardDescription className="text-sm text-gray-600">{listing.location}</CardDescription>
            </CardHeader>
            <CardContent className="p-4">
                <p className="mb-4 text-gray-700">{listing.description}</p>
                <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <p className="font-semibold">Price:</p>
                        <p>€{listing.price.toLocaleString()}</p>
                    </div>
                    <div>
                        <p className="font-semibold">Rooms:</p>
                        <p>{listing.rooms}</p>
                    </div>
                    <div>
                        <p className="font-semibold">Size:</p>
                        <p>{listing.size} m²</p>
                    </div>
                    <div>
                        <p className="font-semibold">Floor:</p>
                        <p>{listing.floor}</p>
                    </div>
                    <div>
                        <p className="font-semibold">Availability:</p>
                        <p>{listing.availability}</p>
                    </div>
                    <div>
                        <p className="font-semibold">Contact:</p>
                        <p>{listing.contact}</p>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\MapView.tsx
Content:
import { useEffect, useRef } from "react";
import * as atlas from "azure-maps-control";
import { Listing } from "@/types";

type MapProps = {
    listings: (Listing & { isBest?: boolean })[];
    center: [number, number];
};

export default function MapView({ listings, center }: MapProps) {
    const mapRef = useRef<atlas.Map | null>(null);
    const dataSourceRef = useRef<atlas.source.DataSource | null>(null);
    const mapContainerRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        if (!mapContainerRef.current) return;

        const map = new atlas.Map(mapContainerRef.current, {
            center,
            zoom: 12,
            view: "Auto",
            disableTelemetry: true,
            authOptions: {
                authType: atlas.AuthenticationType.subscriptionKey,
                subscriptionKey: import.meta.env.VITE_AZURE_MAPS_SUBSCRIPTION_KEY
            }
        });

        map.events.add("ready", () => {
            const datasource = new atlas.source.DataSource();
            map.sources.add(datasource);
            dataSourceRef.current = datasource;

            // Create custom icons with desired colors
            Promise.all([
                map.imageSprite.createFromTemplate("marker-purple", "marker", "#ff00c8", "#FFFFFF"),
                map.imageSprite.createFromTemplate("marker-blue", "marker", "#0000FF", "#FFFFFF")
            ]).then(() => {
                // Create a symbol layer using the custom icons
                const symbolLayer = new atlas.layer.SymbolLayer(datasource, undefined, {
                    iconOptions: {
                        image: ["case", ["==", ["get", "isBest"], true], "marker-purple", "marker-blue"],
                        allowOverlap: true
                    }
                });
                map.layers.add(symbolLayer);

                // Add initial listings
                listings.forEach(l => {
                    const feature = new atlas.data.Feature(new atlas.data.Point([l.lng, l.lat]), { title: l.title, isBest: !!l.isBest });
                    datasource.add(feature);
                });
            });
        });

        mapRef.current = map;

        return () => {
            if (mapRef.current) {
                try {
                    mapRef.current.dispose();
                } catch (err) {
                    console.error("Error disposing map:", err);
                }
                mapRef.current = null;
            }
        };
    }, []);

    useEffect(() => {
        const map = mapRef.current;
        const datasource = dataSourceRef.current;

        if (map && datasource) {
            datasource.clear();
            listings.forEach(l => {
                const feature = new atlas.data.Feature(new atlas.data.Point([l.lng, l.lat]), { title: l.title, isBest: !!l.isBest });
                datasource.add(feature);
            });
        }
    }, [listings, center]);

    return <div ref={mapContainerRef} style={{ width: "100%", height: "400px" }} />;
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\status-message.css
Content:
@keyframes barHeight1 {
    0%, 100% { height: 20%; }
    50% { height: 80%; }
}

@keyframes barHeight2 {
    0%, 100% { height: 40%; }
    50% { height: 60%; }
}

@keyframes barHeight3 {
    0%, 100% { height: 60%; }
    50% { height: 40%; }
}

Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\components\ui\status-message.tsx
Content:
import "./status-message.css";
import { useTranslation } from "react-i18next";

type Properties = {
    isRecording: boolean;
};

export default function StatusMessage({ isRecording }: Properties) {
    const { t } = useTranslation();
    if (!isRecording) {
        return <p className="text mb-4 mt-6">{t("status.notRecordingMessage")}</p>;
    }

    return (
        <div className="flex items-center">
            <div className="relative h-6 w-6 overflow-hidden">
                <div className="absolute inset-0 flex items-end justify-around">
                    {[...Array(4)].map((_, i) => (
                        <div
                            key={i}
                            className="w-1 rounded-full bg-purple-600 opacity-80"
                            style={{
                                animation: `barHeight${(i % 3) + 1} 1s ease-in-out infinite`,
                                animationDelay: `${i * 0.1}s`
                            }}
                        />
                    ))}
                </div>
            </div>
            <p className="text mb-4 ml-2 mt-6">{t("status.conversationInProgress")}</p>
        </div>
    );
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\hooks\useAudioPlayer.tsx
Content:
import { useRef } from "react";

import { Player } from "@/components/audio/player";

const SAMPLE_RATE = 24000;

export default function useAudioPlayer() {
    const audioPlayer = useRef<Player>();

    const reset = () => {
        audioPlayer.current = new Player();
        audioPlayer.current.init(SAMPLE_RATE);
    };

    const play = (base64Audio: string) => {
        const binary = atob(base64Audio);
        const bytes = Uint8Array.from(binary, c => c.charCodeAt(0));
        const pcmData = new Int16Array(bytes.buffer);

        audioPlayer.current?.play(pcmData);
    };

    const stop = () => {
        audioPlayer.current?.stop();
    };

    return { reset, play, stop };
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\hooks\useAudioRecorder.tsx
Content:
import { useRef } from "react";
import { Recorder } from "@/components/audio/recorder";

const BUFFER_SIZE = 4800;

type Parameters = {
    onAudioRecorded: (base64: string) => void;
};

export default function useAudioRecorder({ onAudioRecorded }: Parameters) {
    const audioRecorder = useRef<Recorder>();

    let buffer = new Uint8Array();

    const appendToBuffer = (newData: Uint8Array) => {
        const newBuffer = new Uint8Array(buffer.length + newData.length);
        newBuffer.set(buffer);
        newBuffer.set(newData, buffer.length);
        buffer = newBuffer;
    };

    const handleAudioData = (data: Iterable<number>) => {
        const uint8Array = new Uint8Array(data);
        appendToBuffer(uint8Array);

        if (buffer.length >= BUFFER_SIZE) {
            const toSend = new Uint8Array(buffer.slice(0, BUFFER_SIZE));
            buffer = new Uint8Array(buffer.slice(BUFFER_SIZE));

            const regularArray = String.fromCharCode(...toSend);
            const base64 = btoa(regularArray);

            onAudioRecorded(base64);
        }
    };

    const start = async () => {
        if (!audioRecorder.current) {
            audioRecorder.current = new Recorder(handleAudioData);
        }
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioRecorder.current.start(stream);
    };

    const stop = async () => {
        await audioRecorder.current?.stop();
    };

    return { start, stop };
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\hooks\useRealtime.tsx
Content:
import useWebSocket from "react-use-websocket";

import {
    InputAudioBufferAppendCommand,
    InputAudioBufferClearCommand,
    Message,
    ResponseAudioDelta,
    ResponseAudioTranscriptDelta,
    ResponseDone,
    SessionUpdateCommand,
    ExtensionMiddleTierToolResponse,
    ResponseInputAudioTranscriptionCompleted
} from "@/types";

type Parameters = {
    useDirectAoaiApi?: boolean; // If true, the middle tier will be skipped and the AOAI ws API will be called directly
    aoaiEndpointOverride?: string;
    aoaiApiKeyOverride?: string;
    aoaiModelOverride?: string;

    enableInputAudioTranscription?: boolean;
    onWebSocketOpen?: () => void;
    onWebSocketClose?: () => void;
    onWebSocketError?: (event: Event) => void;
    onWebSocketMessage?: (event: MessageEvent<any>) => void;

    onReceivedResponseAudioDelta?: (message: ResponseAudioDelta) => void;
    onReceivedInputAudioBufferSpeechStarted?: (message: Message) => void;
    onReceivedResponseDone?: (message: ResponseDone) => void;
    onReceivedExtensionMiddleTierToolResponse?: (message: ExtensionMiddleTierToolResponse) => void;
    onReceivedResponseAudioTranscriptDelta?: (message: ResponseAudioTranscriptDelta) => void;
    onReceivedInputAudioTranscriptionCompleted?: (message: ResponseInputAudioTranscriptionCompleted) => void;
    onReceivedError?: (message: Message) => void;
};

export default function useRealTime({
    useDirectAoaiApi,
    aoaiEndpointOverride,
    aoaiApiKeyOverride,
    aoaiModelOverride,
    enableInputAudioTranscription,
    onWebSocketOpen,
    onWebSocketClose,
    onWebSocketError,
    onWebSocketMessage,
    onReceivedResponseDone,
    onReceivedResponseAudioDelta,
    onReceivedResponseAudioTranscriptDelta,
    onReceivedInputAudioBufferSpeechStarted,
    onReceivedExtensionMiddleTierToolResponse,
    onReceivedInputAudioTranscriptionCompleted,
    onReceivedError
}: Parameters) {
    const wsEndpoint = useDirectAoaiApi
        ? `${aoaiEndpointOverride}/openai/realtime?api-key=${aoaiApiKeyOverride}&deployment=${aoaiModelOverride}&api-version=2024-10-01-preview`
        : `/realtime`;

    const { sendJsonMessage } = useWebSocket(wsEndpoint, {
        onOpen: () => onWebSocketOpen?.(),
        onClose: () => onWebSocketClose?.(),
        onError: event => onWebSocketError?.(event),
        onMessage: event => onMessageReceived(event),
        shouldReconnect: () => true
    });

    const startSession = () => {
        const command: SessionUpdateCommand = {
            type: "session.update",
            session: {
                turn_detection: {
                    type: "server_vad"
                }
            }
        };

        if (enableInputAudioTranscription) {
            command.session.input_audio_transcription = {
                model: "whisper-1"
            };
        }

        sendJsonMessage(command);
    };

    const addUserAudio = (base64Audio: string) => {
        const command: InputAudioBufferAppendCommand = {
            type: "input_audio_buffer.append",
            audio: base64Audio
        };

        sendJsonMessage(command);
    };

    const inputAudioBufferClear = () => {
        const command: InputAudioBufferClearCommand = {
            type: "input_audio_buffer.clear"
        };

        sendJsonMessage(command);
    };

    const onMessageReceived = (event: MessageEvent<any>) => {
        onWebSocketMessage?.(event);

        let message: Message;
        try {
            message = JSON.parse(event.data);
        } catch (e) {
            console.error("Failed to parse JSON message:", e);
            throw e;
        }

        switch (message.type) {
            case "response.done":
                onReceivedResponseDone?.(message as ResponseDone);
                break;
            case "response.audio.delta":
                onReceivedResponseAudioDelta?.(message as ResponseAudioDelta);
                break;
            case "response.audio_transcript.delta":
                onReceivedResponseAudioTranscriptDelta?.(message as ResponseAudioTranscriptDelta);
                break;
            case "input_audio_buffer.speech_started":
                onReceivedInputAudioBufferSpeechStarted?.(message);
                break;
            case "conversation.item.input_audio_transcription.completed":
                onReceivedInputAudioTranscriptionCompleted?.(message as ResponseInputAudioTranscriptionCompleted);
                break;
            case "extension.middle_tier_tool_response":
                onReceivedExtensionMiddleTierToolResponse?.(message as ExtensionMiddleTierToolResponse);
                break;
            case "error":
                onReceivedError?.(message);
                break;
        }
    };

    return { startSession, addUserAudio, inputAudioBufferClear };
}


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\i18n\config.ts
Content:
import i18next from "i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import HttpApi from "i18next-http-backend";
import { initReactI18next } from "react-i18next";

import enTranslation from "../locales/en/translation.json";
import esTranslation from "../locales/es/translation.json";
import frTranslation from "../locales/fr/translation.json";
import jaTranslation from "../locales/ja/translation.json";

export const supportedLngs: { [key: string]: { name: string; locale: string } } = {
    en: {
        name: "English",
        locale: "en-US"
    },
    es: {
        name: "Español",
        locale: "es-ES"
    },
    fr: {
        name: "Français",
        locale: "fr-FR"
    },
    ja: {
        name: "日本語",
        locale: "ja-JP"
    }
};

i18next
    .use(HttpApi)
    .use(LanguageDetector)
    .use(initReactI18next)
    // init i18next
    // for all options read: https://www.i18next.com/overview/configuration-options
    .init({
        resources: {
            en: { translation: enTranslation },
            es: { translation: esTranslation },
            fr: { translation: frTranslation },
            ja: { translation: jaTranslation }
        },
        fallbackLng: "en",
        supportedLngs: Object.keys(supportedLngs),
        debug: import.meta.env.DEV,
        interpolation: {
            escapeValue: false // not needed for react as it escapes by default
        }
    });

export default i18next;


Title: C:\Users\moalsayed\workspace\ai-tour\domago\app\frontend\src\lib\utils.ts
Content:
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}


